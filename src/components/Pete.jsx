/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import React, { useEffect, useRef, useMemo } from "react";
import { SkeletonUtils } from "three-stdlib";
import { useCharacterAnimations } from "../contexts/CharacterAnimations";

function Pete({ player = 1, ...props }) {
  const group = useRef();
  const { scene, animations } = useGLTF("./models/pete.glb");
  const { 
    setAnimations, 
    animationIndex, 
    animations: contextAnimations,
    player1AnimationIndex,
    player2AnimationIndex,
    isCombatMode
  } = useCharacterAnimations();
  
  // Clone the scene to create independent instances
  const clonedScene = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { actions, names } = useAnimations(animations, group);

  // Determinar qué índice de animación usar
  const currentAnimationIndex = useMemo(() => {
    // Siempre usar los índices específicos de cada jugador
    return player === 1 ? player1AnimationIndex : player2AnimationIndex;
  }, [player, player1AnimationIndex, player2AnimationIndex]);

  useEffect(() => {
    if (contextAnimations.length === 0) {
      setAnimations(names);
    }
  }, [names, contextAnimations.length, setAnimations]);

  useEffect(() => {
    if (actions && names[currentAnimationIndex]) {
      actions[names[currentAnimationIndex]].reset().fadeIn(0.5).play();
      return () => {
        if (actions[names[currentAnimationIndex]]) {
          actions[names[currentAnimationIndex]].fadeOut(0.5);
        }
      };
    }
  }, [currentAnimationIndex, actions, names]);

  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={clonedScene} />
    </group>
  );
}

useGLTF.preload("./models/pete.glb");

export default Pete; 